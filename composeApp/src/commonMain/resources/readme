

      ------------ This file talks about the Architecture used in developing this Application ----------------

  First we have the Application folder which holds the platform specific expectations in kotlin multiplatform including Ktor, Dateformatter
  and the rest, they also have their respective actual implementations in IOSMain, AndroidMain, DesktopMain and the rest

  The DI for dependency Injection with Koin

  We also have the infrastructure folder for holding the infrastructure as a service code that powers the system, including Twilio, Cloudinary, Dyte
  and the rest.

  We have Domain folder that holds all the classes relating to working with the server which includes the Network Services,
  Repository declaration, the repository implementation and the request contract

  Next is presentations folder, holding all things that powers the User Interface including, the UI contract, the Presenter, DI Module,
  and the UI Tab or screen itself containing respective composables



    ----------------- Below digs deeply about how the system works to display data from server to the UI and intreractions -------------------


    The System utilises MVVM architecture, which implies that Once data is loaded from the server from the domain, the ViewModel takes care
    of how to display in the UI using an intermediary called Handler, all screens or tab has a handler in the Handler folder, that implements the UI
    contract and provide data to the viewmodel, in which viewmodel collectAsState and display when ready, the handler also handles the UIStates like
    loading, error, updating, deleting, content creation and the rest as required.

    Some actions that does not require domain or server actions including opening new tab or screen, new dialog are handled by the
    mutableState of the various composables in the view.

    There is a resourceListEnvelopeViewModel for handling paginated data, all paginated data classes have their respective resourceListEnvelopeViewModel



      ----------------- Below talk about how all tabs, screens works on a normal use -------------------

      First ---> is declaration of all variables, viewmodels and presenters used

      Second ---> is the initialization of the variables and viewmodels, and also listening for mutableState changes for actions like
      opening dialogs and more.

      Next ---> is presenter calling various method to display data for the current UI


      --------------------------- Limitations -------------------------

      -- don't read fresh data from server on dialog, the dialog recomposes and cause presenter to be called multiple times


      ------------- Preferences Saved at -------------------
      Welcome Screen -- authType and authEmail, Country, ProfileId
      OTP Screen --- authType and authPhone, Country, ProfileId